{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/account-filter.pipe.ts","webpack:///./src/app/accounts/accounts.component.css","webpack:///./src/app/accounts/accounts.component.html","webpack:///./src/app/accounts/accounts.component.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/httpda.service.ts","webpack:///./src/app/instances/instances.component.css","webpack:///./src/app/instances/instances.component.html","webpack:///./src/app/instances/instances.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/networks/networks.component.css","webpack:///./src/app/networks/networks.component.html","webpack:///./src/app/networks/networks.component.ts","webpack:///./src/app/routing.component.css","webpack:///./src/app/routing.component.html","webpack:///./src/app/routing.component.ts","webpack:///./src/app/token-interceptor.service.ts","webpack:///./src/app/users/users.component.css","webpack:///./src/app/users/users.component.html","webpack:///./src/app/users/users.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'accountFilter'\n})\nexport class AccountFilterPipe implements PipeTransform {\n\n  transform(instances: any, Ac_filter:string, In_filter:string) {\n    if (instances && instances.length){\n        return instances.filter(instance =>{\n            if (Ac_filter && instance.Account_Name.toLowerCase().indexOf(Ac_filter.toLowerCase()) === -1){\n                return false;\n            }\n            if (In_filter && instance.Instance_ID.toLowerCase().indexOf(In_filter.toLowerCase()) === -1){\n                return false;\n            }\n            return true;\n       })\n    }\n      /** \n      if (!instances || !Ac_filter || !In_filter){\n          return instances\n      }\n\n      if (Ac_filter.length > 0){\n        return instances.filter(account => account.Account_Name.toLowerCase().\n        indexOf(Ac_filter.toLowerCase()) !== -1);\n      }\n\n      if (In_filter.length > 0){\n        return instances.filter(instance => instance.Instance_ID.toLowerCase().\n        indexOf(Ac_filter.toLowerCase()) !== -1);\n      }\n\n  }*/\n\n}\n}\n","module.exports = \"\"","module.exports = \"<style>\\n    #funcs {\\n            position: absolute;\\n            right:0;\\n            top:0;\\n        }\\n    </style>\\n    \\n    <link href=\\\"https://fonts.googleapis.com/icon?family=Material+Icons\\\"\\n          rel=\\\"stylesheet\\\">\\n    <p></p>\\n    \\n    <div id=\\\"funcs\\\">\\n        <button class=\\\"btn btn-sm btn-primary mr-2\\\" data-toggle=\\\"modal\\\" data-target=\\\"#addModal\\\"><i class=\\\"material-icons\\\">add</i></button>\\n        <button class=\\\"btn btn-sm btn-primary mr-2\\\"><i class=\\\"material-icons\\\">autorenew</i></button>\\n    </div>\\n    \\n    <table class=\\\"table table-inverse table-hover\\\" id=\\\"accounts_table\\\">\\n        <thead>\\n          <tr>\\n            <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">#</font></th>\\n            <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Account Name</font></th>\\n            <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Location</font></th>\\n            <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">AWSID</font></th>\\n            <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Secret Key</font></th>\\n            <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\"></font></th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr *ngFor=\\\"let data of Accounts\\\">\\n            <td>{{data[\\\"Account_ID\\\"]}}</td>\\n            <td>{{data[\\\"Account_Name\\\"]}}</td>\\n            <td>{{data[\\\"Region\\\"]}}</td>\\n            <td>{{data[\\\"AWS_ID\\\"]}}</td>\\n            <td>{{data[\\\"AWS_KEY\\\"]}}</td>\\n            <td><button class=\\\"btn btn-primary btn-sm\\\" data-toggle=\\\"modal\\\" data-target=\\\"#editModal\\\"\\n                (click)=\\\"getTabledata(data)\\\"><i class=\\\"material-icons\\\">edit</i></button></td>\\n          </tr>\\n        </tbody>\\n        <button class=\\\"btn btn-primary\\\" (click)=\\\"getAccs()\\\" >checkit</button>\\n      </table>\\n    \\n      <!-- The Modal -->\\n    <div class=\\\"modal\\\" id=\\\"editModal\\\">\\n        <div class=\\\"modal-dialog\\\">\\n          <div class=\\\"modal-content\\\">\\n    \\n            <!-- Modal Header -->\\n            <div class=\\\"modal-header\\\">\\n              <h4 class=\\\"modal-title\\\">Edit Account</h4>\\n              <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\n            </div>\\n    \\n            <!-- Modal body -->\\n            <div class=\\\"modal-body\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"\\\">Account Name</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]='acdetails.Account_Name' name=\\\"Account_Name\\\">\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"\\\">Location</label>\\n                    <select class=\\\"form-control\\\" [(ngModel)]=\\\"acdetails.Region\\\" name=\\\"Region\\\" required>\\n                        <option *ngFor=\\\"let region of endPoints\\\">{{region}}</option>\\n                    </select>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"\\\">ID</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]='acdetails.AWS_ID' name=\\\"AWS_ID\\\">\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"\\\">Key</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]='acdetails.AWS_KEY' name=\\\"AWS_KEY\\\">\\n                </div>\\n            </div>\\n    \\n            <!-- Modal footer -->\\n            <div class=\\\"modal-footer\\\">\\n                <button class=\\\"btn btn-secondary btn-lg mr-2\\\" data-dismiss=\\\"modal\\\">Close</button>\\n                <button (click)=\\\"summafunc()\\\" type=\\\"button\\\" class=\\\"btn btn-primary btn-lg\\\">Update</button>\\n            </div>\\n    \\n          </div>\\n        </div>\\n      </div>\\n    \\n      <!-- Add Account Modal -->\\n    \\n      <div class=\\\"modal\\\" id=\\\"addModal\\\">\\n            <div class=\\\"modal-dialog\\\">\\n              <div class=\\\"modal-content\\\">\\n    \\n                <!-- Modal Header -->\\n                <div class=\\\"modal-header\\\">\\n                  <h4 class=\\\"modal-title\\\">Add Account</h4>\\n                  <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\n                </div>\\n    \\n                <!-- Modal body -->\\n                <div class=\\\"modal-body\\\">\\n                    <form>\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"\\\">Account Name</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control rounded-0\\\" [(ngModel)]=\\\"newaccount.Account_Name\\\" name=\\\"Account_Name\\\" required>\\n                    </div>\\n                    <!--\\n                        <div class=\\\"form-group\\\">\\n                        <label for=\\\"\\\">Location</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"newaccount.Region\\\" name=\\\"Region\\\" required>\\n                    </div>\\n                    -->\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"\\\">Location</label>\\n                        <select class=\\\"form-control\\\" [(ngModel)]=\\\"newaccount.Region\\\" name=\\\"Region\\\" required>\\n                            <option *ngFor=\\\"let region of endPoints\\\">{{region}}</option>\\n                        </select>\\n                    </div>\\n                    \\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"\\\">ID</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"newaccount.AWS_ID\\\" name=\\\"AWS_ID\\\" required>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"\\\">Key</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"newaccount.AWS_KEY\\\" name=\\\"AWS_KEY\\\" required>\\n                    </div>\\n                    </form>\\n                </div>\\n    \\n                <!-- Modal footer -->\\n                <div class=\\\"modal-footer\\\">\\n                    <button class=\\\"btn btn-secondary btn-lg mr-2\\\" data-dismiss=\\\"modal\\\">Close</button>\\n                    <button (click)=\\\"addAcc()\\\" type=\\\"button\\\" class=\\\"btn btn-primary btn-lg\\\">Add</button>\\n                </div>\\n    \\n              </div>\\n            </div>\\n          </div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpdaService } from '../httpda.service';\r\nimport { Accounts } from '../datamodel';\r\nimport {Router} from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-accounts',\r\n  templateUrl: './accounts.component.html',\r\n  styleUrls: ['./accounts.component.css']\r\n})\r\nexport class AccountsComponent implements OnInit {\r\n    observableAccounts: Observable<any>;\r\n    Accounts: Accounts[];\r\n    acdetails={};\r\n    newaccount={};\r\n\r\n    /** List of Available AWS Endpoint and their Regions*/\r\n    endPoints=[\"us-east-2\", \"us-east-1\", \"us-west-1\", \"us-west-2\",\r\n               \"ap-south-1\", \"ap-northeast-3\", \"ap-northeast-2\", \"ap-southeast-1\", \"ap-southeast-2\", \r\n               \"ap-northeast-1\", \"ca-central-1\", \"eu-central-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\",\r\n               \"sa-east-1\"]\r\n\r\n  constructor(private http:HttpdaService,\r\n    private router: Router) { }\r\n\r\n  ngOnInit() {\r\n      this.getAccs();\r\n  }\r\n\r\n  /** This funtions gets the Accounts from the Backend server and store/represents to the users. */\r\n  getAccs() {\r\n    if (this.http.loggedIn() === false) {\r\n        this.router.navigate(['/login'])\r\n    }\r\n      this.observableAccounts = this.http.getAccounts();\r\n      this.observableAccounts.subscribe(\r\n          Accounts => this.Accounts = Accounts\r\n      )\r\n      if (this.Accounts['message']){\r\n          this.router.navigate(['/login'])\r\n      }\r\n  }\r\n\r\n  getTabledata(data) {\r\n      this.acdetails = data;\r\n  }\r\n  \r\n  /** This funtion is used to post a new AWS account to the Backend. */\r\n  addAcc(){\r\n      this.http.addAcc(this.newaccount).subscribe(\r\n          res => console.log(res),\r\n          err => console.log(err)\r\n      )\r\n  }\r\n}","module.exports = \"\"","module.exports = \"<app-routing></app-routing>\\n<router-outlet></router-outlet>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpModule, } from '@angular/http';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http'\nimport {FormsModule} from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { NetworksComponent } from './networks/networks.component';\nimport { AccountsComponent } from './accounts/accounts.component';\nimport { InstancesComponent } from './instances/instances.component';\nimport { RoutingComponent } from './routing.component';\nimport { routing } from './app.routing';\nimport { LoginComponent } from './login/login.component'\nimport { TokenInterceptorService } from './token-interceptor.service';\nimport { UsersComponent } from './users/users.component';\nimport { AccountFilterPipe } from './account-filter.pipe';\n\n//import { InstanceFilterPipe } from './instance-filter.pipe'\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NetworksComponent,\n    AccountsComponent,\n    InstancesComponent,\n    RoutingComponent,\n    LoginComponent,\n    UsersComponent,\n    AccountFilterPipe,\n    //InstanceFilterPipe\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    HttpClientModule,\n    routing\n  ],\n  providers: [{\n      provide: HTTP_INTERCEPTORS,\n      useClass: TokenInterceptorService,\n      multi: true\n  }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Routes, RouterModule } from \"@angular/router\"\nimport { InstancesComponent } from './instances/instances.component'\nimport { NetworksComponent } from './networks/networks.component'\nimport { AccountsComponent } from './accounts/accounts.component'\nimport { LoginComponent } from \"./login/login.component\";\nimport { UsersComponent } from \"./users/users.component\";\n\nconst APP_ROUTES: Routes = [\n  {path:'', redirectTo: '/instances', pathMatch: 'full'},\n  {path:\"instances\", component:InstancesComponent},\n  {path:\"networks\", component:NetworksComponent},\n  {path:\"accounts\", component:AccountsComponent},\n  {path:\"login\", component:LoginComponent},\n  {path:\"users\", component:UsersComponent}\n\n];\n\nexport const routing = RouterModule.forRoot(APP_ROUTES);\n","import { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http'\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router'\nimport 'rxjs/add/operator/map';\nimport 'rxjs/Rx';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpdaService {\n  serverUrl = 'http://summa-dev.today/';\n\n\n  constructor( private http: Http, private httpC:HttpClient,\n    private _router:Router) { }\n\n  getNetworks(): Observable<any> {\n    return this.httpC.get<any>(this.serverUrl + 'networks')\n  }\n\n  getInstances(): Observable<any[]> {\n    return this.httpC.get<any>(this.serverUrl + 'instances')\n}\n  \n  insControls(instancelist:Array<string>, action): Observable<any[]>{\n    return this.httpC.post<any>(this.serverUrl + 'instances/control', {\"instance_id\":instancelist, \"action\":action}).map(this.extractData)\n  }\n\n\n  login(user){\n      return this.http.post(this.serverUrl+'login', user).map(this.extractData)\n  }\n\n  getToken() {\n    return localStorage.getItem('cctoken')\n  }\n\n  loggedIn() {\n    return !!localStorage.getItem('cctoken')\n  }\n\n  getAccounts() {\n    return this.httpC.get<any>(this.serverUrl+ 'accounts')\n}\n\n  getUsers() {\n    return this.httpC.get<any>(this.serverUrl+ 'get_users')\n  }\n\n  addAcc(accdet) {\n      return this.httpC.post<any>(this.serverUrl+ 'add_aws_acc', accdet)\n  }\n\n  addUser(userdet) {\n    return this.httpC.post<any>(this.serverUrl+ 'add_user', userdet)\n  }\n\n  updateUSer(userdet) {\n    return this.httpC.post<any>(this.serverUrl+ 'edit_user', userdet)\n\n  }\n  \n  checkErr(err) {\n      if (err instanceof HttpErrorResponse) {\n          if (err.status === 401) {\n              this._router.navigate(['/login'])\n              localStorage.removeItem('cctoken')\n          }\n      }\n  }\n\n\n  private extractData(res: Response) {\n    let body = res.json();\n    return body;\n  }\n}\n","module.exports = \"\"","module.exports = \"<style>\\n        #refresh {\\n        position: absolute;\\n        right:0;\\n        top:0;\\n        }\\n        #search {\\n        border-right: 2px;\\n        border-left: 2px;\\n        }\\n     </style>\\n     <link href=\\\"https://fonts.googleapis.com/icon?family=Material+Icons\\\"\\n        rel=\\\"stylesheet\\\">\\n     <div id=\\\"filters\\\">\\n     </div>\\n     <div id=\\\"search\\\" class=\\\"form-group\\\">\\n        <div style=\\\"display: flex;\\\" >\\n           <input name=\\\"search\\\" type=\\\"text\\\" class=\\\"form-control col-xs-2 mr-5 ml-5\\\" [(ngModel)]='Ac_filter' placeholder=\\\"Search by Account\\\"\\n           style=\\\"width: 500px;\\\">\\n           <input name=\\\"search\\\" type=\\\"text\\\" class=\\\"form-control col-xs-2\\\" [(ngModel)]='In_filter' placeholder=\\\"Search by Instance\\\"\\n           style=\\\"width: 500px;\\\">\\n        </div>\\n     </div>\\n     <div id=\\\"refresh\\\">\\n        <!--<button class=\\\"btn btn-sm btn-primary mr-2\\\" (click)=\\\"filters()\\\">Show Filter</button>-->\\n        <button class=\\\"btn btn-sm btn-primary mr-2\\\" (click)=\\\"getIns()\\\"><i class=\\\"material-icons\\\">autorenew</i></button>\\n        <select class=\\\"btn btn-primary mr-2\\\" id=\\\"req_type\\\" [(ngModel)]=\\\"action\\\" name=\\\"action\\\">\\n            <option value=\\\"terminate\\\">Terminate</option>\\n            <option value=\\\"start\\\">Start</option>\\n            <option value=\\\"stop\\\">Stop</option>\\n            <option value=\\\"reboot\\\">Reboot</option>\\n        </select>\\n        <!--\\n           <button *ngIf=\\\"action_instances.length > 0\\\" class=\\\"btn btn-primary btn-sm\\\"><i class=\\\"material-icons\\\">done</i></button>\\n           <button *ngIf=\\\"action_instances.length == 0\\\" class=\\\"btn btn-primary btn-sm\\\" disabled><i class=\\\"material-icons\\\">done</i></button>\\n           -->\\n        <button (click)=\\\"onSelect()\\\" [disabled]=\\\"action == ''\\\" class=\\\"btn btn-primary btn-sm\\\"><i class=\\\"material-icons\\\">done</i></button>\\n     </div>\\n     <table class=\\\"table table-inverse table-hover\\\" id=\\\"instance_table\\\">\\n        <thead>\\n           <tr>\\n              <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Select</font></th>\\n              <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">IP Addr</font></th>\\n              <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Instance Type</font></th>\\n              <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Instance ID</font></th>\\n              <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Public IP</font></th>\\n              <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Private DNS</font></th>\\n              <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Subnet ID</font></th>\\n              <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Status</font></th>\\n              <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Account</font></th>\\n           </tr>\\n        </thead>\\n        <tbody>\\n           <tr *ngFor=\\\"let data of instances | accountFilter: Ac_filter:In_filter\\\">\\n              <td><input type=\\\"checkbox\\\"></td>\\n              <td>{{data[\\\"IP\\\"]}}</td>\\n              <td>{{data[\\\"Instance Type\\\"]}}</td>\\n              <td>{{data[\\\"Instance_ID\\\"]}}</td>\\n              <td>{{data[\\\"Public IP\\\"]}}</td>\\n              <td>{{data[\\\"Private DNS\\\"]}}</td>\\n              <td>{{data[\\\"Subnet ID\\\"]}}</td>\\n              <td>{{data[\\\"Status\\\"]}}</td>\\n              <td>{{data[\\\"Account_Name\\\"]}}</td>\\n           </tr>\\n        </tbody>\\n     </table>\"","import { Component, OnInit } from '@angular/core';\nimport { HttpdaService } from '../httpda.service';\nimport {Router} from '@angular/router';\nimport {Instances } from '../datamodel'\n\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-instances',\n  templateUrl: './instances.component.html',\n  styleUrls: ['./instances.component.css']\n})\n\nexport class InstancesComponent implements OnInit {\n  observableInstances: Observable<any[]>;\n  instances: Instances[];\n  action_instances: Array<any> = [];\n  table_data;\n  obsInsControl: Observable<any[]>;\n  wtf: any;\n  action = ''\n  Ac_filter = ''\n  In_filter = ''\n\n\n  constructor(private httpservice: HttpdaService,\n    private _router:Router) { }\n\n  ngOnInit() {\n    this.getIns();\n  }\n\n  getIns() {\n    if (this.httpservice.loggedIn() === false) {\n        this._router.navigate(['/login'])\n    }\n    this.observableInstances = this.httpservice.getInstances();\n    this.observableInstances.subscribe(\n     instances  => this.instances = instances,\n     err => this.httpservice.checkErr(err)\n    );\n  }\n\n  controlIns() {\n    this.obsInsControl = this.httpservice.insControls(this.action_instances, this.action);\n    this.obsInsControl.subscribe(\n    wtf => this.wtf = wtf\n\n    );\n  }\n\n  onSelect() {\n    // We get the table data from the html and find if the checkbox is active.\n    // The rows of the tables can be accessed by \"rows\" object and cells can be accessed using \"cells\" object.\n    this.table_data = document.getElementById('instance_table');\n    // this.checkbool = <HTMLInputElement>this.table_data.rows[1].cells[0]\n    // console.log(this.checkbool.checked)\n    /**if (this.table_data.rows[1].cells[0].children[0].checked){\n      console.log(\"it is checked\")\n    }\n\n    else{\n      console.log(\"It isn't checked\")\n    }*/\n\n    for (let i = 1, row; row = this.table_data.rows[i]; i++) {\n      // console.log(row.cells[2][1])\n      if (i === this.table_data.rows.length) {\n        break;\n      }\n      if (row.cells[0].children[0].checked) {\n        // this.ins = row.cells[3][\"innerText\"]\n        // this.action_instances.push(this.ins)\n        this.action_instances.push(row.cells[3]['innerText']);\n\n      }\n      }\n    console.log(this.action_instances);\n    this.controlIns();\n    this.action_instances = []\n    }\n\n    filterit() {\n        console.log(this.Ac_filter);\n    }\n\n/** \n  filters() {\n    this.div = document.getElementById('filters');\n    this.div.insertAdjacentHTML('beforeend', '<label class=\"mr-2\" for=\"req_type\">Request Type</label>' +\n    '<select class=\"mr-2\" id=\"req_type\" name=\"type\">' +\n      '<option>Account</option>' +\n      '<option>Network</option>' +\n      '<option>VPC</option>' +\n      '<option>InstanceType</option>' +\n    '</select>' +\n    '<label class=\"mr-2\" for=\"operator\">is</label>' +\n    '<select id=\"operator\" name=\"is\">' +\n      '<option>Equals</option>' +\n      '<option>Not Equals</option>' +\n      '<option>Begins with</option>' +\n      '<option>Ends with</option>' +\n    '</select>' +\n    '<label class=\"mr-2 ml-2\" for=\"Value\">to</label>' +\n    '<input [(ngModel)]=\"f_value\" class=\"mr-2\" name=\"Value\"></input>' +\n    '<button class=\" btn btn-sm mr-2\" (click)=\"filterit()\" class=\"btn btn-small\">Apply</button><br>'\n  );\n  }\n}\n\n*/\n}\n\n","module.exports = \"\"","module.exports = \"<div class=\\\"py-5\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-6 mx-auto\\\">\\n            <span class=\\\"anchor\\\" id=\\\"formLogin\\\"></span>\\n      \\n            <!-- form card login -->\\n            <div class=\\\"card rounded-0\\\">\\n              <div class=\\\"card-header\\\">\\n                <h3 class=\\\"mb-0\\\">Login</h3>\\n              </div>\\n              <div class=\\\"card-body\\\">\\n                <form class=\\\"form\\\">\\n                  <div class=\\\"form-group\\\">\\n                    <label for=\\\"uname1\\\">Username</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control rounded-0\\\" [(ngModel)]=\\\"loginUserData.email\\\" name=\\\"username\\\" required>\\n                  </div>\\n                  <div class=\\\"form-group\\\">\\n                    <label>Password</label>\\n                    <input type=\\\"password\\\" class=\\\"form-control rounded-0\\\" [(ngModel)]=\\\"loginUserData.password\\\" name=\\\"password\\\" required>\\n                  </div>\\n                  <button type=\\\"button\\\" (click)=\\\"loginUser()\\\" class=\\\"btn btn-primary btn-lg float-right\\\">Login</button>\\n                </form>\\n              </div>\\n              <!--/card-block-->\\n            </div>\\n            <!-- /form card login -->\\n      \\n          </div>\\n      \\n      \\n        </div>\\n      </div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HttpdaService } from '../httpda.service';\nimport { Router } from '@angular/router'\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n    loginUserData = {}\n\n  constructor(private httpservice: HttpdaService,\n    private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  loginUser(){\n      this.httpservice.login(this.loginUserData)\n      .subscribe(\n          res=>{\n            console.log(res)\n            localStorage.setItem('cctoken', res.cctoken)\n            this.router.navigate(['/instances'])\n          },\n          err=>console.log(err)\n      )\n  }\n\n\n  getToken() {\n      return localStorage.getItem('cctoken')\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<style>\\n  .right-menu{\\n    border-left:0px;\\n    border-right:100px;\\n  }\\n</style>\\n\\n<div class=\\\"right-menu\\\">\\n  <button class=\\\"btn btn-sm btn-primary\\\" (click)=\\\"getIt()\\\">Refresh</button>\\n</div>\\n\\n<table class=\\\"table table-inverse table-hover\\\">\\n  <thead>\\n    <tr>\\n      <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">#</font></th>\\n      <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Network</font></th>\\n      <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Subnet ID</font></th>\\n      <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">VPC ID</font></th>\\n      <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Account Name</font></th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr *ngFor=\\\"let data of networks\\\">\\n      <td>{{data[\\\"SNO\\\"]}}</td>\\n      <td>{{data[\\\"Network\\\"]}}</td>\\n      <td>{{data[\\\"Subnet ID\\\"]}}</td>\\n      <td>{{data[\\\"VPC ID\\\"]}}</td>\\n      <td>{{data[\\\"Account Name\\\"]}}</td>\\n    </tr>\\n  </tbody>\\n</table>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpdaService } from '../httpda.service';\nimport {Router} from '@angular/router';\n\nimport { Networks } from '../datada';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-networks',\n  templateUrl: './networks.component.html',\n  styleUrls: ['./networks.component.css']\n})\nexport class NetworksComponent implements OnInit {\n  observableNetworks: Observable < any[] >\n  networks: Array<string>;\n  yoNets: Array<any> = [];\n\n  constructor(private httpservice: HttpdaService,\n    private _router:Router) { }\n\n  ngOnInit() {\n    this.getIt()\n  }\n\n  getIt() {\n    if (this.httpservice.loggedIn() === false) {\n        this._router.navigate(['/login'])\n    }\n    this.observableNetworks = this.httpservice.getNetworks();\n    this.observableNetworks.subscribe(\n      networks => this.networks = networks,\n      err => this.httpservice.checkErr(err)\n    );\n\n\n    for (let i of this.networks) {\n      this.yoNets.push(i[\"SNO\"], i[\"Network\"], i[\"Subnet ID\"], i[\"VPC ID\"]);\n    }\n    /*\n    for (let i of this.yoNets) {\n      console.log(i)\n    }*/\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<!--<button class=\\\"btn btn-secondary ml-2\\\" *ngIf='loginstatus' (click)='logout()'><i class=\\\"material-icons\\\">\\n    power_settings_new\\n    </i></button>-->\\n\\n<div class=\\\"row\\\">\\n    <button class=\\\"btn btn-secondary ml-2\\\" *ngIf='loginstatus' (click)='logout()'><i class=\\\"material-icons\\\">\\n    power_settings_new\\n    </i></button>\\n    <div class=\\\"container\\\">\\n\\n        <ul class=\\\"nav nav-pills\\\">\\n            <li class=\\\"nav-item\\\">\\n              <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]='[\\\"/networks\\\"]'>Networks</a>\\n            </li>\\n            <li class=\\\"nav-item\\\">\\n              <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]='[\\\"/instances\\\"]'>Instances</a>\\n            </li>\\n          <li class=\\\"nav-item\\\">\\n              <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" href=\\\"#\\\">S3 Buckets</a>\\n            </li>\\n          <li class=\\\"nav-item\\\">\\n              <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]='[\\\"/accounts\\\"]'>Accounts</a>\\n            </li>\\n          <li class=\\\"nav-item\\\">\\n              <a class=\\\"nav-link\\\" routerLinkActive=\\\"active\\\" [routerLink]='[\\\"/users\\\"]'>Users</a>\\n            </li>\\n        </ul>\\n    </div>\\n</div>\\n<p></p>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpdaService } from './httpda.service';\n\n@Component({\n  selector: 'app-routing',\n  templateUrl: './routing.component.html',\n  styleUrls: ['./routing.component.css']\n})\nexport class RoutingComponent implements OnInit {\n    loginstatus: Boolean;\n\n  constructor(private router: Router, private httpservice: HttpdaService) { }\n\n  ngOnInit() {\n      if (this.httpservice.loggedIn() === true) {\n          this.loginstatus = true\n      }\n      else{\n          this.loginstatus = false\n      }\n  }\n\n  logout() {\n      localStorage.removeItem('cctoken')\n      this.router.navigate(['/login'])\n      this.ngOnInit()\n  }\n\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { HttpInterceptor } from '@angular/common/http';\nimport { HttpdaService } from './httpda.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenInterceptorService implements HttpInterceptor{\n\n\n  constructor(private injector: Injector) { }\n\n  intercept(req, next) {\n      let auth = this.injector.get(HttpdaService);\n      let tokenizedReq = req.clone({\n        setHeaders: {\n            \"x-access-token\":auth.getToken()\n        }\n      })\n\n      return next.handle(tokenizedReq)\n        \n  }\n}\n","module.exports = \"\"","module.exports = \"<style>\\n    #funcs {\\n            position: absolute;\\n            right:0;\\n            top:0;\\n        }\\n    </style>\\n    \\n    <link href=\\\"https://fonts.googleapis.com/icon?family=Material+Icons\\\"\\n          rel=\\\"stylesheet\\\">\\n    <p></p>\\n    \\n    <div id=\\\"funcs\\\">\\n        <button class=\\\"btn btn-sm btn-primary mr-2\\\" data-toggle=\\\"modal\\\" data-target=\\\"#addModal\\\"><i class=\\\"material-icons\\\">add</i></button>\\n        <button class=\\\"btn btn-sm btn-primary mr-2\\\"><i class=\\\"material-icons\\\">autorenew</i></button>\\n    </div>\\n    \\n    <table class=\\\"table table-inverse table-hover\\\" id=\\\"accounts_table\\\">\\n        <thead>\\n          <tr>\\n            <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Username</font></th>\\n            <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Email</font></th>\\n            <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\">Password</font></th>\\n            <th scope=\\\"col\\\"><font color=\\\"#007BFF\\\"></font></th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr *ngFor=\\\"let data of Users\\\">\\n            <td>{{data[\\\"Username\\\"]}}</td>\\n            <td>{{data[\\\"Email\\\"]}}</td>\\n            <td>{{data[\\\"Password\\\"]}}</td>\\n            <td><button class=\\\"btn btn-primary btn-sm\\\" data-toggle=\\\"modal\\\" data-target=\\\"#editModal\\\"\\n                (click)=\\\"getTabledata(data)\\\"><i class=\\\"material-icons\\\">edit</i></button></td>\\n          </tr>\\n        </tbody>\\n        <button class=\\\"btn btn-primary\\\" (click)=\\\"getTabledata()\\\" >checkit</button>\\n      </table>\\n    \\n    <div class=\\\"modal\\\" id=\\\"editModal\\\">\\n        <div class=\\\"modal-dialog\\\">\\n          <div class=\\\"modal-content\\\">\\n    \\n            <div class=\\\"modal-header\\\">\\n              <h4 class=\\\"modal-title\\\">Edit Account</h4>\\n              <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\n            </div>\\n    \\n            <div class=\\\"modal-body\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"\\\">Username</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]='eUsers.Username' name=\\\"Username\\\">\\n                </div>\\n                \\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"\\\">Email</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]='eUsers.Email' name=\\\"Email\\\" disabled>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"\\\">Password</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]='eUsers.Password' name=\\\"Password\\\">\\n                </div>\\n            </div>\\n    \\n            <div class=\\\"modal-footer\\\">\\n                <button class=\\\"btn btn-secondary btn-lg mr-2\\\" data-dismiss=\\\"modal\\\">Close</button>\\n                <button (click)=\\\"editUser()\\\" type=\\\"button\\\" class=\\\"btn btn-primary btn-lg\\\">Update</button>\\n            </div>\\n    \\n          </div>\\n        </div>\\n      </div>\\n    \\n    \\n    \\n      <!-- Add Account Modal -->\\n    \\n      <div class=\\\"modal\\\" id=\\\"addModal\\\">\\n            <div class=\\\"modal-dialog\\\">\\n              <div class=\\\"modal-content\\\">\\n    \\n                <!-- Modal Header -->\\n                <div class=\\\"modal-header\\\">\\n                  <h4 class=\\\"modal-title\\\">Add Account</h4>\\n                  <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\n                </div>\\n    \\n                <!-- Modal body -->\\n                <div class=\\\"modal-body\\\">\\n                    <form>\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"\\\">Account Name</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control rounded-0\\\" [(ngModel)]=\\\"userDetails.username\\\" name=\\\"Username\\\" required>\\n                    </div>\\n                    <!--\\n                        <div class=\\\"form-group\\\">\\n                        <label for=\\\"\\\">Location</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"newaccount.Region\\\" name=\\\"Region\\\" required>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"\\\">Location</label>\\n                        <select class=\\\"form-control\\\" [(ngModel)]=\\\"newaccount.Region\\\" name=\\\"Region\\\" required>\\n                            <option *ngFor=\\\"let region of endPoints\\\">{{region}}</option>\\n                        </select>\\n                    </div>\\n                    -->\\n                    \\n                    \\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"\\\">ID</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"userDetails.email\\\" name=\\\"email\\\" required>\\n                    </div>\\n\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"\\\">Password</label>\\n                        <input type=\\\"password\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"userDetails.password\\\" name=\\\"password\\\" required>\\n                    </div>\\n                    </form>\\n                </div>\\n    \\n                <!-- Modal footer -->\\n                <div class=\\\"modal-footer\\\">\\n                    <button class=\\\"btn btn-secondary btn-lg mr-2\\\" data-dismiss=\\\"modal\\\">Close</button>\\n                    <button (click)=\\\"addUser()\\\" type=\\\"button\\\" class=\\\"btn btn-primary btn-lg\\\">Add</button>\\n                </div>\\n    \\n              </div>\\n            </div>\\n          </div>\"","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpdaService } from '../httpda.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.css']\n})\nexport class UsersComponent implements OnInit {\n    userDetails = {} /** New user details */\n    observableUsers: Observable<any>;\n    Users: Array<any>;\n    eUsers = {} /** EXisting user data from the selected table */\n\n  constructor(private http:HttpdaService, private router:Router) { }\n\n  ngOnInit() {\n      this.getUsers()\n  }\n  \n  getUsers() {\n    if (this.http.loggedIn() === false) {\n        this.router.navigate(['/login'])\n    }\n      this.observableUsers = this.http.getUsers();\n      this.observableUsers.subscribe(\n          users => this.Users = users\n      )\n      if (this.Users['message']){\n        this.router.navigate(['/login'])\n    }\n\n  }\n\n  getTabledata(data){\n    this.eUsers = data;\n  }\n\n  addUser() {\n    this.http.addUser(this.userDetails).subscribe(\n      res=>console.log(res),\n      err=>console.log(err)\n    )\n  }\n\n  editUser() {\n    this.http.updateUSer(this.eUsers).subscribe(\n      res=>console.log(res),\n      err=>console.log(err)\n    )\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}